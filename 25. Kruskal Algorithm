#include <stdio.h>
#include <stdlib.h>

#define V 6
#define E 9

int parent[V];

int find(int i) {
    while (parent[i] != -1) i = parent[i];
    return i;
}

int main() {
    int graph[E][3] = {{0, 1, 4}, {0, 2, 4}, {1, 2, 2}, {1, 3, 6}, {2, 3, 8},
                       {2, 4, 9}, {3, 4, 10}, {3, 5, 6}, {4, 5, 5}};
    int mst[E][3], edgeCount = 0;

    for (int i = 0; i < V; i++) parent[i] = -1;

    for (int i = 0; i < E && edgeCount < V - 1; ++i) {
        int src = graph[i][0], dest = graph[i][1], weight = graph[i][2];
        int x = find(src), y = find(dest);
        if (x != y) mst[edgeCount][0] = src, mst[edgeCount][1] = dest, mst[edgeCount++][2] = weight, parent[x] = y;
    }

    printf("Following are the edges in the constructed MST\n");
    for (int i = 0; i < edgeCount; ++i) printf("%d - %d == %d\n", mst[i][0], mst[i][1], mst[i][2]);

    return 0;
}
